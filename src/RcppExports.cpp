// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// aMatrixSparseRevLex
std::vector<unsigned long long> aMatrixSparseRevLex(std::vector<int>& bS, std::vector<int>& M);
RcppExport SEXP _MCARtest_aMatrixSparseRevLex(SEXP bSSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type bS(bSSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(aMatrixSparseRevLex(bS, M));
    return rcpp_result_gen;
END_RCPP
}
// infoS
unsigned long long infoS(std::vector<int>& bS, std::vector<int>& M);
RcppExport SEXP _MCARtest_infoS(SEXP bSSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type bS(bSSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(infoS(bS, M));
    return rcpp_result_gen;
END_RCPP
}
// infoS2
std::vector<unsigned long long> infoS2(std::vector<int>& bS, std::vector<int>& M);
RcppExport SEXP _MCARtest_infoS2(SEXP bSSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type bS(bSSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(infoS2(bS, M));
    return rcpp_result_gen;
END_RCPP
}
// colVector
std::vector<unsigned long long> colVector(unsigned long long cardS, unsigned long long cardChi);
RcppExport SEXP _MCARtest_colVector(SEXP cardSSEXP, SEXP cardChiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned long long >::type cardS(cardSSEXP);
    Rcpp::traits::input_parameter< unsigned long long >::type cardChi(cardChiSEXP);
    rcpp_result_gen = Rcpp::wrap(colVector(cardS, cardChi));
    return rcpp_result_gen;
END_RCPP
}
// margProj
std::vector<double> margProj(std::vector<double>& p, std::vector<int>& bS, std::vector<int>& M);
RcppExport SEXP _MCARtest_margProj(SEXP pSEXP, SEXP bSSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double>& >::type p(pSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type bS(bSSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(margProj(p, bS, M));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MCARtest_aMatrixSparseRevLex", (DL_FUNC) &_MCARtest_aMatrixSparseRevLex, 2},
    {"_MCARtest_infoS", (DL_FUNC) &_MCARtest_infoS, 2},
    {"_MCARtest_infoS2", (DL_FUNC) &_MCARtest_infoS2, 2},
    {"_MCARtest_colVector", (DL_FUNC) &_MCARtest_colVector, 2},
    {"_MCARtest_margProj", (DL_FUNC) &_MCARtest_margProj, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_MCARtest(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
